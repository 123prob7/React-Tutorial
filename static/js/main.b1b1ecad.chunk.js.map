{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","style","winSquare","color","value","Board","i","isWinTrace","this","winTrace","includes","squares","length","parseInt","Array","fill","map","_","j","renderSquare","React","Component","Game","state","history","Math","floor","lastPos","stepNumber","xIsNext","sortType","size","n","slice","calculateWinner","setState","concat","step","e","target","status","current","winner","curStep","moves","move","pos","lengthOfBoard","desc","jumpTo","fontWeight","console","log","line","handleClick","type","onChange","handleSize","sortMoves","reverse","len","temp","newArr","push","splice","k","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b1b1ecad.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick} style={props.winSquare ? {color: \"red\"}: null}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    let isWinTrace = this.props.winTrace && this.props.winTrace.includes(i) ? true : false;\r\n    return (\r\n      <Square\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n        key={i}\r\n        winSquare={isWinTrace}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const length = parseInt(this.props.length)\r\n    return (\r\n      <div>\r\n        { // 3. Rewrite Board to use two loops to make the squares instead of hardcoding them.\r\n          [...Array(length)].fill(1).map((_, i) => (\r\n            <div key={i} className=\"board-row\">\r\n              {[...Array(length)].fill(1).map((_, j) => this.renderSquare(length*i+j))}\r\n            </div>\r\n          ))\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(Math.floor(9)).fill(null),\r\n          lastPos: null, // used for recording the new change\r\n        },\r\n      ],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      sortType: true, // state for sorting stuffs (true = ascending)\r\n      size: 3, // size of a match\r\n      n: 3, // the amount of X/O to finish the game, autochange when the size mutate\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    const winner = calculateWinner(squares, this.state.size, this.state.n);\r\n    if (winner || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares,\r\n          lastPos: i, // record the new move occured\r\n        },\r\n      ]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: step % 2 === 0,\r\n    });\r\n  }\r\n\r\n  sortMoves() {\r\n    this.setState({\r\n      sortType: !this.state.sortType\r\n    })\r\n  }\r\n\r\n  handleSize(e) {\r\n    this.setState({\r\n      size: e.target.value,\r\n      history: [{\r\n        squares: Array(Math.floor(e.target.value * e.target.value)).fill(null),\r\n        lastPos: null,\r\n      }],\r\n      n: e.target.value<=5?e.target.value:5,\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      sortType: true,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const size = this.state.size;\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares, size, this.state.n);\r\n\r\n    const curStep = this.state.stepNumber;\r\n    const moves = history.map((step, move) => {\r\n      // 1. Display the location for each move in the format (col, row) in the move history list.\r\n      const pos = step.lastPos\r\n      const lengthOfBoard = this.state.size\r\n      const desc = move ? \"Go to move (\" + (Math.floor(pos/lengthOfBoard)+1) + \", \" + (pos%lengthOfBoard+1) + \")\" : \"Go to game start\";\r\n      return (  // 2. Bold the currently selected item in the move list\r\n        <li key={move}>\r\n          <button onClick={() => this.jumpTo(move)} style={move===curStep?{fontWeight:\"bold\"}:null}>{desc}</button> \r\n        </li>\r\n      );\r\n    });\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner.winner;\r\n      console.log(winner.line)\r\n    } else if (history.length === (size*size+1) && history.length === this.state.stepNumber+1) { // 6. When no one wins, display a message about the result being a draw\r\n      status = \"Draw\";\r\n    } else {\r\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            length={size}\r\n            onClick={(i) => this.handleClick(i)}\r\n            winTrace={winner && winner.line} //In js, true always evaluates 2nd expression. Ex: false && expression => false\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <div><span>Size </span><input type=\"number\" value={size} onChange={(e) => this.handleSize(e)}></input></div>\r\n          <div>\r\n            <button onClick={() => this.sortMoves()}>Sort {this.state.sortType ? \"Ascending\":\"Descending\"}</button>\r\n          </div>\r\n          <ol>{this.state.sortType ? moves: moves.reverse()}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n\r\nfunction calculateWinner(squares, size, len) {\r\n  //change the shape\r\n  const temp = [...squares];\r\n  const newArr = [];\r\n  for (let _ = 0; _ < size; _++) {\r\n    newArr.push(temp.splice(0,size))\r\n  }\r\n  //console.log(newArr)\r\n  // iterate through row -> col to find winning trace\r\n  for (let i = 0; i < size; i++) {\r\n    for (let j = 0; j < size; j++) {\r\n      // check xlen top straight line, upper right cross, right, lower right cross\r\n      // top\r\n      let line = []\r\n      for (let k = 0; k < len; k++) {\r\n        if (i-k>=0) {\r\n          if (newArr[i][j] && newArr[i][j]===newArr[i-k][j]) {\r\n            line.push(size*(i-k)+j)\r\n            if (k === len-1) return { winner: newArr[i][j], line: line }\r\n            continue\r\n          } else {line=[]; break}\r\n        } else {line=[]; break}\r\n      }\r\n      // upper right cross\r\n      for (let k = 0; k < len; k++) {\r\n        if (i-k>=0 && j+k<size) {\r\n          if (newArr[i][j] && newArr[i][j]===newArr[i-k][j+k]) {\r\n            line.push(size*(i-k)+(j+k))\r\n            if (k === len-1) return { winner: newArr[i][j], line: line }\r\n            continue\r\n          } else {line=[]; break}\r\n        } else {line=[]; break}\r\n      }\r\n      // right\r\n      for (let k = 0; k < len; k++) {\r\n        if (j+k<size) {\r\n          if (newArr[i][j] && newArr[i][j]===newArr[i][j+k]) {\r\n            line.push(size*i+j+k)\r\n            if (k === len-1) return { winner: newArr[i][j], line: line }\r\n            continue\r\n          } else {line=[]; break}\r\n        } else {line=[]; break}\r\n      }\r\n      // lower right cross\r\n      for (let k = 0; k < len; k++) {\r\n        if (i+k<size && j+k<size) {\r\n          if (newArr[i][j] && newArr[i][j]===newArr[i+k][j+k]) {\r\n            line.push(size*(i+k)+(j+k))\r\n            if (k === len-1) return { winner: newArr[i][j], line: line }\r\n            continue\r\n          } else break\r\n        } else break\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n"],"sourceRoot":""}